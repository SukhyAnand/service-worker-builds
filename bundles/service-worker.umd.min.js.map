{"version":3,"sources":["packages/service-worker/service-worker.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","serviceWorker","rxjs","operators","core","common","this","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","ERR_SW_NOT_SUPPORTED","NgswCommChannel","controllerChanges","fromEvent","pipe","map","controller","currentController","defer","of","controllerWithChanges","concat","worker","filter","c","registration","switchMap","getRegistration","events","event","data","publish","connect","errorObservable","message","throwError","Error","postMessage","action","payload","take","tap","sw","toPromise","then","postMessageWithStatus","type","nonce","waitForStatus","Promise","all","generateNonce","Math","round","random","eventsOfType","nextEventOfType","status","defineProperty","get","enumerable","configurable","SwPush","subscriptionChanges","Subject","isEnabled","messages","NEVER","subscription","pushManager","workerDrivenSubscriptions","pm","getSubscription","sub","merge","requestSubscription","options","_this","reject","pushOptions","userVisibleOnly","key","decodeBase64","serverPublicKey","replace","applicationServerKey","Uint8Array","ArrayBuffer","charCodeAt","subscribe","next","unsubscribe","success","input","atob","decorators","Injectable","ctorParameters","SwUpdate","available","activated","checkForUpdate","statusNonce","activateUpdate","RegistrationOptions","SCRIPT","InjectionToken","ngswAppInitializer","injector","script","platformId","app","ApplicationRef","isPlatformBrowser","navigator","enabled","whenStable","isStable","stable","addEventListener","register","scope","ngswCommChannelFactory","opts","undefined","ServiceWorkerModule","ngModule","providers","provide","useValue","useFactory","deps","PLATFORM_ID","APP_INITIALIZER","Injector","multi","NgModule","args","ɵangular_packages_service_worker_service_worker_e","ɵangular_packages_service_worker_service_worker_a","ɵangular_packages_service_worker_service_worker_b","ɵangular_packages_service_worker_service_worker_c","ɵangular_packages_service_worker_service_worker_d","value"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.1.0-beta.0+43.sha-6ea6926\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('@angular/service-worker', ['exports', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/common'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.serviceWorker = {}),global.rxjs,global.rxjs.operators,global.ng.core,global.ng.common));\n}(this, (function (exports,rxjs,operators,core,common) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    var __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\n    function errorObservable(message) {\n        return rxjs.defer(function () { return rxjs.throwError(new Error(message)); });\n    }\n    /**\n     * @experimental\n    */\n    var  /**\n     * @experimental\n    */\n    NgswCommChannel = /** @class */ (function () {\n        function NgswCommChannel(serviceWorker) {\n            this.serviceWorker = serviceWorker;\n            if (!serviceWorker) {\n                this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n            }\n            else {\n                var controllerChangeEvents = (rxjs.fromEvent(serviceWorker, 'controllerchange'));\n                var controllerChanges = (controllerChangeEvents.pipe(operators.map(function () { return serviceWorker.controller; })));\n                var currentController = (rxjs.defer(function () { return rxjs.of(serviceWorker.controller); }));\n                var controllerWithChanges = (rxjs.concat(currentController, controllerChanges));\n                this.worker = (controllerWithChanges.pipe(operators.filter(function (c) { return !!c; })));\n                this.registration = (this.worker.pipe(operators.switchMap(function () { return serviceWorker.getRegistration(); })));\n                var rawEvents = rxjs.fromEvent(serviceWorker, 'message');\n                var rawEventPayload = rawEvents.pipe(operators.map(function (event) { return event.data; }));\n                var eventsUnconnected = (rawEventPayload.pipe(operators.filter(function (event) { return !!event && !!event['type']; })));\n                var events = eventsUnconnected.pipe(operators.publish());\n                this.events = events;\n                events.connect();\n            }\n        }\n        /**\n         * @internal\n         */\n        /**\n           * @internal\n           */\n        NgswCommChannel.prototype.postMessage = /**\n           * @internal\n           */\n        function (action, payload) {\n            return this.worker\n                .pipe(operators.take(1), operators.tap(function (sw) {\n                sw.postMessage(__assign({ action: action }, payload));\n            }))\n                .toPromise()\n                .then(function () { return undefined; });\n        };\n        /**\n         * @internal\n         */\n        /**\n           * @internal\n           */\n        NgswCommChannel.prototype.postMessageWithStatus = /**\n           * @internal\n           */\n        function (type, payload, nonce) {\n            var waitForStatus = this.waitForStatus(nonce);\n            var postMessage = this.postMessage(type, payload);\n            return Promise.all([waitForStatus, postMessage]).then(function () { return undefined; });\n        };\n        /**\n         * @internal\n         */\n        /**\n           * @internal\n           */\n        NgswCommChannel.prototype.generateNonce = /**\n           * @internal\n           */\n        function () { return Math.round(Math.random() * 10000000); };\n        /**\n         * @internal\n         */\n        // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n        // types flow correctly\n        /**\n           * @internal\n           */\n        // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n        // types flow correctly\n        NgswCommChannel.prototype.eventsOfType = /**\n           * @internal\n           */\n        // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n        // types flow correctly\n        function (type) {\n            return this.events.pipe(operators.filter(function (event) { return event.type === type; }));\n        };\n        /**\n         * @internal\n         */\n        // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n        // types flow correctly\n        /**\n           * @internal\n           */\n        // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n        // types flow correctly\n        NgswCommChannel.prototype.nextEventOfType = /**\n           * @internal\n           */\n        // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n        // types flow correctly\n        function (type) {\n            return (this.eventsOfType(type).pipe(operators.take(1)));\n        };\n        /**\n         * @internal\n         */\n        /**\n           * @internal\n           */\n        NgswCommChannel.prototype.waitForStatus = /**\n           * @internal\n           */\n        function (nonce) {\n            return this.eventsOfType('STATUS')\n                .pipe(operators.filter(function (event) { return event.nonce === nonce; }), operators.take(1), operators.map(function (event) {\n                if (event.status) {\n                    return undefined;\n                }\n                throw new Error((event.error));\n            }))\n                .toPromise();\n        };\n        Object.defineProperty(NgswCommChannel.prototype, \"isEnabled\", {\n            get: function () { return !!this.serviceWorker; },\n            enumerable: true,\n            configurable: true\n        });\n        return NgswCommChannel;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Subscribe and listen to push notifications from the Service Worker.\n     *\n     * @experimental\n     */\n    var SwPush = /** @class */ (function () {\n        function SwPush(sw) {\n            this.sw = sw;\n            this.subscriptionChanges = new rxjs.Subject();\n            if (!sw.isEnabled) {\n                this.messages = rxjs.NEVER;\n                this.subscription = rxjs.NEVER;\n                return;\n            }\n            this.messages = this.sw.eventsOfType('PUSH').pipe(operators.map(function (message) { return message.data; }));\n            this.pushManager = this.sw.registration.pipe(operators.map(function (registration) { return registration.pushManager; }));\n            var workerDrivenSubscriptions = this.pushManager.pipe(operators.switchMap(function (pm) { return pm.getSubscription().then(function (sub) { return sub; }); }));\n            this.subscription = rxjs.merge(workerDrivenSubscriptions, this.subscriptionChanges);\n        }\n        Object.defineProperty(SwPush.prototype, \"isEnabled\", {\n            /**\n             * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n             * ServiceWorkerModule).\n             */\n            get: /**\n               * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n               * ServiceWorkerModule).\n               */\n            function () { return this.sw.isEnabled; },\n            enumerable: true,\n            configurable: true\n        });\n        SwPush.prototype.requestSubscription = function (options) {\n            var _this = this;\n            if (!this.sw.isEnabled) {\n                return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n            }\n            var pushOptions = { userVisibleOnly: true };\n            var key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n            var applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n            for (var i = 0; i < key.length; i++) {\n                applicationServerKey[i] = key.charCodeAt(i);\n            }\n            pushOptions.applicationServerKey = applicationServerKey;\n            return this.pushManager.pipe(operators.switchMap(function (pm) { return pm.subscribe(pushOptions); }), operators.take(1))\n                .toPromise()\n                .then(function (sub) {\n                _this.subscriptionChanges.next(sub);\n                return sub;\n            });\n        };\n        SwPush.prototype.unsubscribe = function () {\n            var _this = this;\n            if (!this.sw.isEnabled) {\n                return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n            }\n            var doUnsubscribe = function (sub) {\n                if (sub === null) {\n                    throw new Error('Not subscribed to push notifications.');\n                }\n                return sub.unsubscribe().then(function (success) {\n                    if (!success) {\n                        throw new Error('Unsubscribe failed!');\n                    }\n                    _this.subscriptionChanges.next(null);\n                });\n            };\n            return this.subscription.pipe(operators.take(1), operators.switchMap(doUnsubscribe)).toPromise();\n        };\n        SwPush.prototype.decodeBase64 = function (input) { return atob(input); };\n        SwPush.decorators = [\n            { type: core.Injectable }\n        ];\n        /** @nocollapse */\n        SwPush.ctorParameters = function () { return [\n            { type: NgswCommChannel, },\n        ]; };\n        return SwPush;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Subscribe to update notifications from the Service Worker, trigger update\n     * checks, and forcibly activate updates.\n     *\n     * @experimental\n     */\n    var SwUpdate = /** @class */ (function () {\n        function SwUpdate(sw) {\n            this.sw = sw;\n            if (!sw.isEnabled) {\n                this.available = rxjs.NEVER;\n                this.activated = rxjs.NEVER;\n                return;\n            }\n            this.available = this.sw.eventsOfType('UPDATE_AVAILABLE');\n            this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n        }\n        Object.defineProperty(SwUpdate.prototype, \"isEnabled\", {\n            /**\n             * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n             * ServiceWorkerModule).\n             */\n            get: /**\n               * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n               * ServiceWorkerModule).\n               */\n            function () { return this.sw.isEnabled; },\n            enumerable: true,\n            configurable: true\n        });\n        SwUpdate.prototype.checkForUpdate = function () {\n            if (!this.sw.isEnabled) {\n                return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n            }\n            var statusNonce = this.sw.generateNonce();\n            return this.sw.postMessageWithStatus('CHECK_FOR_UPDATES', { statusNonce: statusNonce }, statusNonce);\n        };\n        SwUpdate.prototype.activateUpdate = function () {\n            if (!this.sw.isEnabled) {\n                return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n            }\n            var statusNonce = this.sw.generateNonce();\n            return this.sw.postMessageWithStatus('ACTIVATE_UPDATE', { statusNonce: statusNonce }, statusNonce);\n        };\n        SwUpdate.decorators = [\n            { type: core.Injectable }\n        ];\n        /** @nocollapse */\n        SwUpdate.ctorParameters = function () { return [\n            { type: NgswCommChannel, },\n        ]; };\n        return SwUpdate;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var RegistrationOptions = /** @class */ (function () {\n        function RegistrationOptions() {\n        }\n        return RegistrationOptions;\n    }());\n    var SCRIPT = new core.InjectionToken('NGSW_REGISTER_SCRIPT');\n    function ngswAppInitializer(injector, script, options, platformId) {\n        var initializer = function () {\n            var app = injector.get(core.ApplicationRef);\n            if (!(common.isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\n                options.enabled !== false)) {\n                return;\n            }\n            var whenStable = app.isStable.pipe(operators.filter(function (stable) { return !!stable; }), operators.take(1)).toPromise();\n            // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n            // becomes active. This allows the SW to initialize itself even if there is no application\n            // traffic.\n            navigator.serviceWorker.addEventListener('controllerchange', function () {\n                if (navigator.serviceWorker.controller !== null) {\n                    navigator.serviceWorker.controller.postMessage({ action: 'INITIALIZE' });\n                }\n            });\n            // Don't return the Promise, as that will block the application until the SW is registered, and\n            // cause a crash if the SW registration fails.\n            whenStable.then(function () { return navigator.serviceWorker.register(script, { scope: options.scope }); });\n        };\n        return initializer;\n    }\n    function ngswCommChannelFactory(opts, platformId) {\n        return new NgswCommChannel(common.isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker :\n            undefined);\n    }\n    /**\n     * @experimental\n     */\n    var ServiceWorkerModule = /** @class */ (function () {\n        function ServiceWorkerModule() {\n        }\n        /**\n         * Register the given Angular Service Worker script.\n         *\n         * If `enabled` is set to `false` in the given options, the module will behave as if service\n         * workers are not supported by the browser, and the service worker will not be registered.\n         */\n        /**\n           * Register the given Angular Service Worker script.\n           *\n           * If `enabled` is set to `false` in the given options, the module will behave as if service\n           * workers are not supported by the browser, and the service worker will not be registered.\n           */\n        ServiceWorkerModule.register = /**\n           * Register the given Angular Service Worker script.\n           *\n           * If `enabled` is set to `false` in the given options, the module will behave as if service\n           * workers are not supported by the browser, and the service worker will not be registered.\n           */\n        function (script, opts) {\n            if (opts === void 0) { opts = {}; }\n            return {\n                ngModule: ServiceWorkerModule,\n                providers: [\n                    { provide: SCRIPT, useValue: script },\n                    { provide: RegistrationOptions, useValue: opts },\n                    {\n                        provide: NgswCommChannel,\n                        useFactory: ngswCommChannelFactory,\n                        deps: [RegistrationOptions, core.PLATFORM_ID]\n                    },\n                    {\n                        provide: core.APP_INITIALIZER,\n                        useFactory: ngswAppInitializer,\n                        deps: [core.Injector, SCRIPT, RegistrationOptions, core.PLATFORM_ID],\n                        multi: true,\n                    },\n                ],\n            };\n        };\n        ServiceWorkerModule.decorators = [\n            { type: core.NgModule, args: [{\n                        providers: [SwPush, SwUpdate],\n                    },] }\n        ];\n        return ServiceWorkerModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵangular_packages_service_worker_service_worker_e = NgswCommChannel;\n    exports.ɵangular_packages_service_worker_service_worker_a = RegistrationOptions;\n    exports.ɵangular_packages_service_worker_service_worker_b = SCRIPT;\n    exports.ɵangular_packages_service_worker_service_worker_c = ngswAppInitializer;\n    exports.ɵangular_packages_service_worker_service_worker_d = ngswCommChannelFactory;\n    exports.ServiceWorkerModule = ServiceWorkerModule;\n    exports.SwPush = SwPush;\n    exports.SwUpdate = SwUpdate;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=service-worker.umd.js.map\n"]}