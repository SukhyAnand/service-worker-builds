{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../../../packages/service-worker/src/update.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AAGzC,OAAO,EAAC,KAAK,IAAI,SAAS,EAAC,MAAM,uBAAuB,CAAC;AAGzD,OAAO,EAAC,oBAAoB,EAAE,eAAe,EAA6C,MAAM,aAAa,CAAC;;;;;;;;IAc5G,kBAAoB,EAAmB;QAAnB,OAAE,GAAF,EAAE,CAAiB;QACrC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,SAAS,GAAG,SAAS,EAAE,CAAC;YAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,EAAE,CAAC;YAC7B,MAAM,CAAC;SACR;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;QAC1D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;KAC3D;IAMD,sBAAI,+BAAS;QAJb;;;WAGG;;;;;;QACH,cAA2B,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE;;;OAAA;;;;IAEtD,iCAAc;;;IAAd;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;SACxD;QACD,qBAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,qBAAqB,CAAC,mBAAmB,EAAE,EAAC,WAAW,aAAA,EAAC,EAAE,WAAW,CAAC,CAAC;KACvF;;;;IAED,iCAAc;;;IAAd;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;SACxD;QACD,qBAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,EAAC,WAAW,aAAA,EAAC,EAAE,WAAW,CAAC,CAAC;KACrF;;gBAnCF,UAAU;;;;gBATmB,eAAe;;mBAd7C;;SAwBa,QAAQ","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer as obs_defer} from 'rxjs/observable/defer';\nimport {never as obs_never} from 'rxjs/observable/never';\nimport {map as op_map} from 'rxjs/operator/map';\n\nimport {ERR_SW_NOT_SUPPORTED, NgswCommChannel, UpdateActivatedEvent, UpdateAvailableEvent} from './low_level';\n\n\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * @experimental\n */\n@Injectable()\nexport class SwUpdate {\n  readonly available: Observable<UpdateAvailableEvent>;\n  readonly activated: Observable<UpdateActivatedEvent>;\n\n  constructor(private sw: NgswCommChannel) {\n    if (!sw.isEnabled) {\n      this.available = obs_never();\n      this.activated = obs_never();\n      return;\n    }\n    this.available = this.sw.eventsOfType('UPDATE_AVAILABLE');\n    this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n  }\n\n  /**\n   * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n   * ServiceWorkerModule).\n   */\n  get isEnabled(): boolean { return this.sw.isEnabled; }\n\n  checkForUpdate(): Promise<void> {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const statusNonce = this.sw.generateNonce();\n    return this.sw.postMessageWithStatus('CHECK_FOR_UPDATES', {statusNonce}, statusNonce);\n  }\n\n  activateUpdate(): Promise<void> {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const statusNonce = this.sw.generateNonce();\n    return this.sw.postMessageWithStatus('ACTIVATE_UPDATE', {statusNonce}, statusNonce);\n  }\n}\n"]}