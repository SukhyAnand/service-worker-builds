{"version":3,"file":"push.js","sourceRoot":"","sources":["../../../../../packages/service-worker/src/push.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge as obs_merge} from 'rxjs/observable/merge';\nimport {never as obs_never} from 'rxjs/observable/never';\nimport {map as op_map} from 'rxjs/operator/map';\nimport {switchMap as op_switchMap} from 'rxjs/operator/switchMap';\nimport {take as op_take} from 'rxjs/operator/take';\nimport {toPromise as op_toPromise} from 'rxjs/operator/toPromise';\n\nimport {ERR_SW_NOT_SUPPORTED, NgswCommChannel} from './low_level';\n\n\n/**\n * Subscribe and listen to push notifications from the Service Worker.\n *\n * @experimental\n */\n@Injectable()\nexport class SwPush {\n  readonly messages: Observable<object>;\n  readonly subscription: Observable<PushSubscription|null>;\n\n  private pushManager: Observable<PushManager>;\n  private subscriptionChanges: Subject<PushSubscription|null> =\n      new Subject<PushSubscription|null>();\n\n  constructor(private sw: NgswCommChannel) {\n    if (!sw.isEnabled) {\n      this.messages = obs_never();\n      this.subscription = obs_never();\n      return;\n    }\n    this.messages =\n        op_map.call(this.sw.eventsOfType('PUSH'), (message: {data: object}) => message.data);\n\n    this.pushManager = <Observable<PushManager>>(op_map.call(\n        this.sw.registration,\n        (registration: ServiceWorkerRegistration) => { return registration.pushManager; }));\n\n    const workerDrivenSubscriptions = <Observable<PushSubscription|null>>(op_switchMap.call(\n        this.pushManager, (pm: PushManager) => pm.getSubscription().then(sub => { return sub; })));\n    this.subscription = obs_merge(workerDrivenSubscriptions, this.subscriptionChanges);\n  }\n\n  /**\n   * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n   * ServiceWorkerModule).\n   */\n  get isEnabled(): boolean { return this.sw.isEnabled; }\n\n  requestSubscription(options: {serverPublicKey: string}): Promise<PushSubscription> {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const pushOptions: PushSubscriptionOptionsInit = {userVisibleOnly: true};\n    let key = atob(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n    let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n    for (let i = 0; i < key.length; i++) {\n      applicationServerKey[i] = key.charCodeAt(i);\n    }\n    pushOptions.applicationServerKey = applicationServerKey;\n    const subscribe = <Observable<PushSubscription>>(\n        op_switchMap.call(this.pushManager, (pm: PushManager) => pm.subscribe(pushOptions)));\n    const subscribeOnce = op_take.call(subscribe, 1);\n    return (op_toPromise.call(subscribeOnce) as Promise<PushSubscription>).then(sub => {\n      this.subscriptionChanges.next(sub);\n      return sub;\n    });\n  }\n\n  unsubscribe(): Promise<void> {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const unsubscribe = op_switchMap.call(this.subscription, (sub: PushSubscription | null) => {\n      if (sub !== null) {\n        return sub.unsubscribe().then(success => {\n          if (success) {\n            this.subscriptionChanges.next(null);\n            return undefined;\n          } else {\n            throw new Error('Unsubscribe failed!');\n          }\n        });\n      } else {\n        throw new Error('Not subscribed to push notifications.');\n      }\n    });\n    const unsubscribeOnce = op_take.call(unsubscribe, 1);\n    return op_toPromise.call(unsubscribeOnce) as Promise<void>;\n  }\n}\n"]}